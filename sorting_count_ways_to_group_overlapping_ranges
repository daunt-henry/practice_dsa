// Problem: Count Ways to Group Overlapping Ranges

/*
You are given a 2D array ranges where ranges[i] = [start_i, end_i].
You can group overlapping ranges together.
Return the total number of ways to form non-overlapping groups.

Each group independently contributes 2 choices (either select or not).
Return the total number of ways modulo 1e9 + 7.

Example:
Input: ranges = [[6,10],[5,15]]
Output: 2
Explanation: They overlap, so only 2 ways.

Approach:
1. Sort all ranges by starting point.
2. Merge overlapping ranges.
3. For each merged group, multiply answer by 2.
*/

#include <stdio.h>
#include <stdlib.h>

#define MOD 1000000007

int cmp(const void *a, const void *b) {
    int *r1 = *(int **)a;
    int *r2 = *(int **)b;
    if (r1[0] != r2[0]) return r1[0] - r2[0];
    return r1[1] - r2[1];
}

int countWays(int** ranges, int rangesSize, int* rangesColSize) {
    qsort(ranges, rangesSize, sizeof(int*), cmp);

    int merged = 0;
    int end = -1;

    for (int i = 0; i < rangesSize; ++i) {
        if (ranges[i][0] > end) {
            merged++;
            end = ranges[i][1];
        } else {
            if (ranges[i][1] > end)
                end = ranges[i][1];
        }
    }

    long long result = 1;
    for (int i = 0; i < merged; ++i) {
        result = (result * 2) % MOD;
    }

    return (int)result;
}

// Sample test
int main() {
    int a[] = {6, 10};
    int b[] = {5, 15};
    int* ranges[] = {a, b};
    int colSize[] = {2, 2};
    int result = countWays(ranges, 2, colSize);
    printf("Output: %d\n", result);  // Expected Output: 2
    return 0;
}
